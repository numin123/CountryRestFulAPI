[{"/var/www/new.country.com/html/src/index.js":"1","/var/www/new.country.com/html/src/App.js":"2","/var/www/new.country.com/html/src/reportWebVitals.js":"3","/var/www/new.country.com/html/src/component/table/countriesTable.js":"4","/var/www/new.country.com/html/src/component/modal/modalCountry.js":"5","/var/www/new.country.com/html/src/component/login/login.js":"6"},{"size":500,"mtime":1608607301130,"results":"7","hashOfConfig":"8"},{"size":532,"mtime":1608694084208,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1608607301131,"results":"10","hashOfConfig":"8"},{"size":23610,"mtime":1609751426996,"results":"11","hashOfConfig":"8"},{"size":6474,"mtime":1608746714796,"results":"12","hashOfConfig":"8"},{"size":1348,"mtime":1608986639117,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"x540am",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/var/www/new.country.com/html/src/index.js",[],["30","31"],"/var/www/new.country.com/html/src/App.js",["32","33","34"],"import logo from './logo.svg';\nimport './App.css';\n\nimport React, {useState, useEffect} from \"react\";\nimport DataGridCountry from './component/table/countriesTable';\n\n\nfunction App() {\n\n\n    const styleTableOne = {\n        align:'center', margin:'auto',\n        width: '90%'\n    }\n\n  return (\n    <div className=\"App\">\n      {/*<header className=\"App-header\">*/}\n      {/*  */}\n      {/*</header>*/}\n      <div style={styleTableOne}>\n        <DataGridCountry/>\n      </div>\n        <br/><br/>\n    </div>\n  );\n}\n\nexport default App;\n","/var/www/new.country.com/html/src/reportWebVitals.js",[],"/var/www/new.country.com/html/src/component/table/countriesTable.js",["35","36","37","38","39","40","41","42","43","44","45","46","47","48","49"],"import * as React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { Button, IconButton } from \"@material-ui/core\";\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport {useEffect, useState} from \"react\";\nimport { Pagination } from '@material-ui/lab';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport PropTypes from 'prop-types';\n\nimport ModalCountryBox from '../modal/modalCountry'\nimport FormLogin from '../login/login'\nimport { CSVLink } from \"react-csv\";\nimport { useCookies } from 'react-cookie';\nimport Cookies from 'universal-cookie';\n\n\n\nconst useStylesBt = makeStyles({\n    root: {\n        background: (props) =>\n            props.color === 'red'\n                ? 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)'\n                : 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n        border: 0,\n        borderRadius: 3,\n        boxShadow: (props) =>\n            props.color === 'red'\n                ? '0 3px 5px 2px rgba(255, 105, 135, .3)'\n                : '0 3px 5px 2px rgba(33, 203, 243, .3)',\n        color: 'white',\n        height: 48,\n        padding: '0 30px',\n        margin: 8,\n    },\n});\n\nconst useStylesTable = makeStyles({\n    root: {\n        // background: (props) =>\n        //     props.color === 'red'\n        //         ? 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)'\n        //         : 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n        border: 0,\n        borderRadius: 3,\n        boxShadow: (props) =>\n            props.color === 'red'\n                ? '0 10px 10px 15px rgba(255, 105, 135, .3)'\n                : '0 10px 10px 15px rgba(33, 203, 243, .3)',\n        //color: 'white',\n        height: 48,\n        padding: '0 30px',\n        margin: 8,\n    },\n});\n\nfunction MyButton(props) {\n    const { color, ...other } = props;\n    const classes = useStylesBt(props);\n    return <Button className={classes.root} {...other} />;\n}\n\nfunction MyButtonCSV(props) {\n    const { color, ...other } = props;\n    const classes = useStylesBt(props);\n    return <CSVLink className={classes.root} {...other} />;\n}\n\nfunction MyButtonIcon(props) {\n    const { color, ...other } = props;\n    const classes = useStylesBt(props);\n    return <IconButton className={classes.root} {...other} />;\n}\n\nfunction MyTable(props) {\n    const { color, ...other } = props;\n    const classes = useStylesTable(props);\n    return <DataGrid className={classes.root} {...other} />;\n}\n\nMyButton.propTypes = {\n    color: PropTypes.oneOf(['blue', 'red']).isRequired,\n};\n\n\nconst DataGridCountry= (props) => {\n\n    const [cookies, setCookie, removeCookie] = useCookies([\"user\"]);\n\n    const useStyles = makeStyles({\n        root: {\n            display: 'flex',\n        },\n    });\n\n    function CustomPagination(props) {\n        const { pagination, api } = props;\n        const classes = useStyles();\n\n        return (\n            <Pagination\n                className={classes.root}\n                color=\"primary\"\n                page={pagination.page}\n                count={pagination.pageCount}\n                onChange={(event, value) => api.current.setPage(value)}\n            />\n        );\n    }\n\n    CustomPagination.propTypes = {\n        /**\n         * ApiRef that let you manipulate the grid.\n         */\n        api: PropTypes.shape({\n            current: PropTypes.object.isRequired,\n        }).isRequired,\n        /**\n         * The object containing all pagination details in [[PaginationState]].\n         */\n        pagination: PropTypes.shape({\n            page: PropTypes.number.isRequired,\n            pageCount: PropTypes.number.isRequired,\n            pageSize: PropTypes.number.isRequired,\n            paginationMode: PropTypes.oneOf(['client', 'server']).isRequired,\n            rowCount: PropTypes.number.isRequired,\n        }).isRequired,\n    };\n\n    const [modalIsOpenEdit, setIsOpenEdit] = useState(false);\n    const [modalIsOpenAdd, setIsOpenAdd] = useState(false);\n    const [dataFrom, setDataSelection] = useState([]);\n    const [countryName, setCountryName] = useState(\"\");\n    const [countryCapital, setCountryCapital] = useState(\"\");\n    const [countryRegion, setCountryRegion] = useState(\"\");\n    const [countryPopulation, setCountryPopulation] = useState();\n    const [selectionCountry, setSelection] = React.useState(undefined);\n    const [selectionCountryName, setSelectionName] = React.useState(\"\");\n\n    const [filteredCountries, setFilteredCountries] = useState([]);\n    const [searchName, setSearchCountryName] = useState(\"\");\n    const [searchCapital, setSearchCountryCapital] = useState(\"\");\n    const [searchRegion, setSearchCountryRegion] = useState(\"\");\n    const [searchPopulation, setSearchCountryPopulation] = useState(\"\");\n\n    let [page, setPage] = React.useState(1);\n    const [validate, setValidate] = React.useState(false)\n\n    const loadDataCountries = async () => {\n\n        fetch('http://test.new.country.com/api/countries', {\n\n            headers: {\n                'accessToken': cookies.user,\n                'Authorization': \"Bearer\",\n                'Content-Type': 'application/json',\n                \"expiresIn\": 86400\n            },\n        })\n                .then(function (response) {\n                    if(response.ok) {\n                        return response.json();\n                    }\n                    console.log(dataCountries);\n                    throw new Error('Network response was not ok.');\n                }).then(function(data) {\n                setDataCountries(data.data.countries);\n            console.log(\"test\");\n                console.log(dataCountries);\n            }).catch(function(error) {\n                console.log('There has been a problem with your fetch operation: ',\n                    error.message);\n            });\n    }\n\n\n\n    const [dataCountries, setDataCountries] = useState([]);\n\n    const params = (new URL(window.location)).searchParams;\n\n    useEffect( () => {\n        if (params.get('token')) {\n            setCookie(\"user\", params.get('token'), { path: '/' });\n            console.log(cookies.user); // Pacman\n        }\n\n        loadDataCountries();\n    }, []);\n\n    useEffect(() => {\n        if (!dataCountries) return;\n        setFilteredCountries(\n            dataCountries.filter((value) =>\n                value.name.toLowerCase().includes(searchName.toLowerCase())\n                        )\n        );\n        // setFilteredCountries(\n        //     dataCountries.filter((value) =>\n        //         value.capital.toLowerCase().includes(searchCapital.toLowerCase())\n        //     )\n        // );\n        // setFilteredCountries(\n        //     dataCountries.filter((value) =>\n        //         value.region.toLowerCase().includes(searchRegion.toLowerCase())\n        //     )\n        // );\n        // setFilteredCountries(\n        //     dataCountries.filter((value) =>\n        //         value.population.toLowerCase().includes(searchPopulation.toLowerCase())\n        //     )\n        // );\n\n    }, [searchName, dataCountries]);\n\n    const MySwal = withReactContent(Swal)\n\n    function submitEdit(value) {\n        if (value === undefined || value === null) {\n            return\n        }\n        setCountryName(value.name)\n        setCountryCapital(value.capital)\n        setCountryRegion(value.region)\n        setCountryPopulation(value.population)\n        setDataSelection(value);\n        setIsOpenEdit(true);\n    }\n\n\n    function submitDelete(value) {\n        MySwal.fire({\n            title: 'Are you sure?',\n            text: 'Are you sure to delete ' + value.name + '?',\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Yes'\n        }).then((result) => {\n            if (result.isConfirmed) {\n                deleteCountry(value.id).then(r =>\n                    Swal.fire(\n                        'Deleted!',\n                        'Your ' + value.name + 'has been deleted.',\n                        'success'\n                    ))\n            }\n        })\n    }\n\n    function submitDeleteSelection() {\n        if (selectionCountry === undefined || selectionCountry === null) {\n            return Swal.fire({\n                title: 'Not selected',\n                text: 'Please select the country you want to delete.',\n                icon: 'warning',\n                showCancelButton: false,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n            })\n\n        }\n\n        let c = 0;\n        let stringName = \"\";\n\n        dataCountries.forEach((value, index, self) => {\n            if (selectionCountry[c] == value.id) {\n                stringName += value.name + \", \"\n                c++;\n                if (c == selectionCountry.length) {\n                    return ;\n                }\n            }\n        });\n        console.log(stringName)\n\n        stringName = stringName.substr(0,stringName.length-2);\n        console.log(stringName)\n\n        setSelectionName(stringName)\n\n        Swal.fire({\n            title: 'Are you sure?',\n            text: 'Are you sure you want to delete ' + stringName + '?',\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Yes, delete it!'\n        }).then((result) => {\n            if (result.isConfirmed) {\n                deleteAllSelection(stringName)\n            }\n        })\n    }\n\n    const deleteCountry = async (id) => {\n        fetch('http://test.new.country.com/api/countries/' + id , {\n            method: 'DELETE',\n        }).then(function (response) {\n            if(response.ok) {\n                return response.json();\n            }\n            throw new Error('Network response was not ok.');\n        }).then(function(data) {\n            setDataCountries(data.data.countries);\n        }).catch(function(error) {\n            console.log('There has been a problem with your fetch operation: ',\n                error.message);\n        });\n\n    }\n\n    const deleteAllSelection = async (stringName) => {\n\n        console.log(selectionCountryName)\n        if (selectionCountry === undefined || selectionCountry === null) {\n            return\n        }\n        fetch('http://test.new.country.com/api/destroySelection', {\n            method: 'DELETE',\n            body: JSON.stringify({\n                selectionCountry: selectionCountry\n            }),\n            credentials: 'same-origin',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8; application/json',\n            }\n        }).then(function (response) {\n            if(response.ok) {\n                Swal.fire(\n                    'Deleted!',\n                    stringName + ' deleted.',\n                    'success'\n                )\n                //setDataCountries(data.data.countries)\n                setSelection();\n                return response.json();\n            } else {\n                console.log(\"status error\")\n                Swal.fire(\n                    'ERROR!',\n                    stringName + ' not found.',\n                    'error'\n                )\n            }\n            throw new Error('Network response was not ok.');\n        }).then(function(data) {\n            setDataCountries(data.data.countries);\n        }).catch(function(error) {\n            console.log('There has been a problem with your fetch operation: ',\n                error.message);\n        });\n    }\n\n    const createCountry = async () => {\n        setValidate(true);\n\n        if (dataFrom === undefined || dataFrom === null) {\n            return\n        }\n\n        let dataGet = document.getElementById('form-save-data');\n        let formData = new FormData(dataGet);\n        formData.append(\"token\", cookies.user);\n\n        fetch ('http://test.new.country.com/api/countries', {\n            method: 'POST',\n            body: formData,\n        }).then(function (response) {\n            response.json().then(\n                function (data) {\n                    console.log(data.message);\n                    if(data.status === true) {\n                        setIsOpenAdd(false);\n                        Swal.fire(\n                            'Successful create!',\n                            formData.get('name') + ' has been created.',\n                            'success'\n                        )\n                        setDataCountries(data.data.countries);\n                    } else {\n                        Swal.fire(\n                            'ERROR!',\n                            data.message,\n                            'error'\n                        )\n                    }\n                }\n            )\n\n        }).then(function (test) {\n            throw new Error('Network response was not ok.');\n        }).then(function(data) {\n            console.log(data);\n        }).catch(function(error) {\n            console.log('There has been a problem with your fetch operation: ',\n                error.message);\n        });\n\n    }\n\n    const editCountry = async () => {\n        setValidate(true);\n        if (dataFrom === undefined || dataFrom === null) {\n            return\n        }\n\n        let dataGet = document.getElementById('form-save-data');\n        let formData = new FormData(dataGet);\n        formData.append(\"_method\",\"PATCH\")\n\n        let dataCountry = {\n            'name':formData.get('name'),\n            'capital':formData.get('capital'),\n            'region':formData.get('region'),\n            'population':formData.get('population')\n        }\n\n        console.log(dataCountry)\n\n        const response = await fetch ('http://test.new.country.com/api/countries/' + dataFrom.id, {\n            method: 'PATCH',\n            body: JSON.stringify({\n                name:formData.get('name'),\n                capital:formData.get('capital'),\n                region:formData.get('region'),\n                population:formData.get('population')\n            }),\n            credentials: 'same-origin',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8; application/json-patch+json',\n            }\n        }).then(function (response) {\n            response.json().then(\n                function (data) {\n                    console.log(data.message);\n                    if(data.status === true) {\n                        setIsOpenAdd(false);\n                        Swal.fire(\n                            'Successful!',\n                            data.message,\n                            'success'\n                        )\n                        setIsOpenEdit(false);\n                        setDataCountries(data.data.countries);\n                    } else {\n                        Swal.fire(\n                            'ERROR!',\n                            data.message,\n                            'error'\n                        )\n                    }\n                }\n            )\n\n        }).then(function (test) {\n            throw new Error('Network response was not ok.');\n        }).then(function(data) {\n            setDataCountries(data.data.countries);\n        }).catch(function(error) {\n            console.log('There has been a problem with your fetch operation: ',\n                error.message);\n        });\n    }\n\n\n    const columns = [\n        { field: 'id', headerName: '#', width: 70 },\n\n        {\n            field: 'flag',\n            headerName: 'Flag', headerAlign: 'left',\n            sortable: false,\n            renderCell: (params) => (\n                <img\n                    style={{\n                        width: 80,\n                        height: 50,\n                        objectFit: 'fill'\n                    }}\n\n                    src={params.row.flag}\n                    alt={'flag'}/>\n            ),\n\n        },\n\n        { field: 'name', headerName: 'Name', width: 170 },\n        { field: 'capital', headerName: 'Capital', width: 100 },\n        { field: 'region', headerName: 'Region', width: 100 },\n        {\n            field: 'population',\n            headerName: 'Population',\n            type: 'number',\n            width: 100,\n        },\n        {\n            field: 'edit',\n            headerName: 'Edit',\n            headerAlign: 'center',\n            sortable: false,\n            width: 90,\n\n            renderCell: (params) => (\n\n                <MyButtonIcon\n                    color=\"blue\"\n                    align={'center'}\n                    style={{ width: '50%', margin:'auto'}}\n                    startIcon={<EditIcon/>}\n                    onClick={() => submitEdit(params.row)}\n                ><EditIcon fontSize=\"large\" />\n                </MyButtonIcon>\n            ),\n        },{\n            field: 'delete',\n            headerName: 'Delete',\n            headerAlign: 'center',\n            sortable: false,\n            width: 90,\n\n            renderCell: (params) => (\n\n                <MyButtonIcon\n                    color=\"red\"\n                    aria-label=\"delete\"\n                    align={'center'}\n                    style={{ width: '50%', margin:'auto'}}\n                    startIcon={<DeleteIcon/>}\n                    onClick={() => submitDelete(params.row)}\n                ><DeleteIcon fontSize=\"large\" />\n                </MyButtonIcon>\n            ),\n        },\n    ];\n\n    function exportTasks(_this) {\n        let _url = (_this).data('href');\n        window.location.href = _url;\n    }\n\n    const exportCountry = async () => {\n        fetch('http://test.new.country.com/api/export')\n            .then(function (response) {\n                if(response.ok) {\n                    return response.json();\n                }\n                throw new Error('Network response was not ok.');\n            }).then(function(data) {\n            setDataCountries(data.data.countries);\n        }).catch(function(error) {\n            console.log('There has been a problem with your fetch operation: ',\n                error.message);\n        });\n    }\n\n\n\n\n    return (\n        <div>\n            <br/><br/>\n            <FormLogin/>\n\n            <MyButtonCSV\n                style={{ height:'100px' }}\n                data={dataCountries\n                }>Download CSV</MyButtonCSV><br/><br/>\n\n            <MyButton\n                color=\"red\"\n                align={'center'}\n                style={{ width: '50%', margin:'auto'}}\n                onClick={() => setIsOpenAdd(true)}\n            >ADD COUNTRY\n            </MyButton><br/><br/>\n            <MyButton\n                color=\"blue\"\n                variant=\"contained\" color=\"secondary\"\n                align={'center'}\n                style={{ width: '50%', margin:'auto'}}\n                onClick={() => submitDeleteSelection()}\n            >DELETE SELECTION COUNTRY\n            </MyButton><br/><br/>\n            <label>\n                Search : { ' ' }\n            </label>\n            <input\n                style={{ width: '80%'}}\n                type=\"text\"\n                className=\"swal2-input\"\n                placeholder=\"Search Countries\"\n                onChange={(e) => setSearchCountryName(e.target.value)}\n            /><br/><br/>\n            {/*<input*/}\n            {/*    style={{ width: '80%'}}*/}\n            {/*    type=\"text\"*/}\n            {/*    className=\"swal2-input\"*/}\n            {/*    placeholder=\"Search Countries\"*/}\n            {/*    onChange={(e) => setSearchCountryCapital(e.target.value)}*/}\n            {/*/><br/><br/>*/}\n            {/*<input*/}\n            {/*    style={{ width: '80%'}}*/}\n            {/*    type=\"text\"*/}\n            {/*    className=\"swal2-input\"*/}\n            {/*    placeholder=\"Search Countries\"*/}\n            {/*    onChange={(e) => setSearchCountryRegion(e.target.value)}*/}\n            {/*/><br/><br/>*/}\n            {/*<input*/}\n            {/*    style={{ width: '80%'}}*/}\n            {/*    type=\"text\"*/}\n            {/*    className=\"swal2-input\"*/}\n            {/*    placeholder=\"Search Countries\"*/}\n            {/*    onChange={(e) => setSearchCountryPopulation(e.target.value)}*/}\n            {/*/><br/><br/>*/}\n\n        <div style={{ height: 400, width: '100%' }}>\n            <MyTable\n\n                showColumnRightBorder={false}\n                showCellRightBorder={false}\n                rows={filteredCountries}\n                loading={filteredCountries.length === 0}\n                columns={columns}\n                pageSize={20}\n                checkboxSelection\n                autoHeight={true}\n                rowHeight={80}\n                components={{\n                    pagination: CustomPagination,\n                }}\n                onSelectionChange={(newSelection) => {\n                    setSelection(newSelection.rowIds);\n                }}\n                page={page}\n                onPageChange={(params) => {\n                    if (params.pageCount < 1) {\n                        setPage(1);\n                    } if (params.pageCount >= 2) {\n                        setPage(2);\n                    } if (params.pageCount >= 10) {\n                        setPage(1);\n                    }\n\n                }}/>\n\n\n            <ModalCountryBox\n                nameFrom = {'Add Country From'}\n                setModalIsOpenAdd = {modalIsOpenAdd}\n                onChangeName = {() =>\n                    (name, e) => {\n                        setCountryName({name});\n                    }}\n                onChangeCapital = {() =>\n                    (capital, e) => {\n                        setCountryCapital({capital});\n                    }}\n                onChangeRegion = {() =>\n                    (region, e) => {\n                        setCountryRegion({region});\n                    }}\n                onChangePopulation = {(population, e) => {\n                    setCountryPopulation({population});\n                }}\n                onClickClose = {() => setIsOpenAdd(false)}\n                onClickOk = {() => createCountry()}\n                styleModal = {useStylesTable()}\n                validate = {validate}\n                setValidate = {setValidate}\n\n            />\n\n            <ModalCountryBox\n                nameFrom = 'Edit Country From'\n                setModalIsOpenAdd = {modalIsOpenEdit}\n                onChangeName = {\n                    (value) => {\n                        setCountryName(value);\n                    }}\n                onChangeCapital = {\n                    (value) => {\n                        setCountryCapital(value);\n                    }}\n                onChangeRegion = {\n                    (value) => {\n                        setCountryRegion(value);\n                    }}\n                onChangePopulation = {\n                    (value) => {\n                        setCountryPopulation(value);\n                    }}\n                onClickClose = {() => setIsOpenEdit(false)}\n                onClickOk= {() => editCountry()}\n                valueName = {countryName}\n                valueCapital = {countryCapital}\n                valueRegion = {countryRegion}\n                valuePopulation = {countryPopulation}\n                validate = {validate}\n                setValidate = {setValidate}\n            /><br/><br/>\n\n\n        </div><br/><br/></div>\n\n\n    );\n}\n\nexport default DataGridCountry","/var/www/new.country.com/html/src/component/modal/modalCountry.js",[],["50","51"],"/var/www/new.country.com/html/src/component/login/login.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":1,"column":8,"nodeType":"58","messageId":"59","endLine":1,"endColumn":12},{"ruleId":"56","severity":1,"message":"60","line":4,"column":16,"nodeType":"58","messageId":"59","endLine":4,"endColumn":24},{"ruleId":"56","severity":1,"message":"61","line":4,"column":26,"nodeType":"58","messageId":"59","endLine":4,"endColumn":35},{"ruleId":"56","severity":1,"message":"62","line":20,"column":8,"nodeType":"58","messageId":"59","endLine":20,"endColumn":15},{"ruleId":"56","severity":1,"message":"63","line":93,"column":32,"nodeType":"58","messageId":"59","endLine":93,"endColumn":44},{"ruleId":"56","severity":1,"message":"64","line":147,"column":12,"nodeType":"58","messageId":"59","endLine":147,"endColumn":25},{"ruleId":"56","severity":1,"message":"65","line":147,"column":27,"nodeType":"58","messageId":"59","endLine":147,"endColumn":50},{"ruleId":"56","severity":1,"message":"66","line":148,"column":12,"nodeType":"58","messageId":"59","endLine":148,"endColumn":24},{"ruleId":"56","severity":1,"message":"67","line":148,"column":26,"nodeType":"58","messageId":"59","endLine":148,"endColumn":48},{"ruleId":"56","severity":1,"message":"68","line":149,"column":12,"nodeType":"58","messageId":"59","endLine":149,"endColumn":28},{"ruleId":"56","severity":1,"message":"69","line":149,"column":30,"nodeType":"58","messageId":"59","endLine":149,"endColumn":56},{"ruleId":"70","severity":1,"message":"71","line":194,"column":8,"nodeType":"72","endLine":194,"endColumn":10,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":274,"column":37,"nodeType":"76","messageId":"77","endLine":274,"endColumn":39},{"ruleId":"74","severity":1,"message":"75","line":277,"column":23,"nodeType":"76","messageId":"77","endLine":277,"endColumn":25},{"ruleId":"56","severity":1,"message":"78","line":430,"column":15,"nodeType":"58","messageId":"59","endLine":430,"endColumn":23},{"ruleId":"56","severity":1,"message":"79","line":547,"column":14,"nodeType":"58","messageId":"59","endLine":547,"endColumn":25},{"ruleId":"56","severity":1,"message":"80","line":552,"column":11,"nodeType":"58","messageId":"59","endLine":552,"endColumn":24},{"ruleId":"81","severity":1,"message":"82","line":589,"column":37,"nodeType":"83","endLine":589,"endColumn":54},{"ruleId":"52","replacedBy":"84"},{"ruleId":"54","replacedBy":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'Cookies' is defined but never used.","'removeCookie' is assigned a value but never used.","'searchCapital' is assigned a value but never used.","'setSearchCountryCapital' is assigned a value but never used.","'searchRegion' is assigned a value but never used.","'setSearchCountryRegion' is assigned a value but never used.","'searchPopulation' is assigned a value but never used.","'setSearchCountryPopulation' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cookies.user', 'loadDataCountries', 'params', and 'setCookie'. Either include them or remove the dependency array.","ArrayExpression",["88"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'response' is assigned a value but never used.","'exportTasks' is defined but never used.","'exportCountry' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["86"],["87"],"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},"Update the dependencies array to be: [cookies.user, loadDataCountries, params, setCookie]",{"range":"91","text":"92"},[6274,6276],"[cookies.user, loadDataCountries, params, setCookie]"]